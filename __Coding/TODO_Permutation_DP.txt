/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/
// approach 1: uses c++ insert function
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        if(nums.size() == 0){
            vector<vector<int> > ans;
            vector<int> t;
            ans.push_back(t);
            return ans;
        }
        return permute_help(nums,0);
    }
    vector<vector<int> > permute_help(vector<int> &A, int ind) {
        vector<vector<int> > ans;
        if(ind == (A.size()-1)){ //base
            vector<int> t;
            t.push_back(A[ind]);
            ans.push_back(t);
            return ans;
        }// recurrance
        vector<vector<int> > pre = permute_help(A, ind+1);
        for(vector<int> item : pre){
            for(int i = 0;i<=item.size();i++){
                vector<int> t = item;
                t.insert(t.begin()+i,A[ind]);
                ans.push_back(t);
            }
        }
        return ans;
    }
};